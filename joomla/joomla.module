<?php

/**
 * @file
 * The joomla module used for migrate Joomla to Drupal.
 */
define('JOOMLA_IMPORT_CONTENT', TRUE);
define('JOOMLA_IMPORT_CATEGORIES', TRUE);
define('JOOMLA_IMPORT_USERS', TRUE);
define('JOOMLA_IMPORT_GROUPS', TRUE);
define('JOOMLA_IMPORT_COMMENTS', FALSE);
define('JOOMLA_DATABASE_HOST', 'localhost');
define('JOOMLA_DATABASE_NAME', 'joomla');
define('JOOMLA_DATABASE_USER', 'joomla');
define('JOOMLA_DATABASE_PASS', FALSE);
define('JOOMLA_DATABASE_PORT', 3306);
define('JOOMLA_PREFIX', 'jos_');
define('JOOMLA_PATH', FALSE);
define('JOOMLA_INPUT_FORMAT', 'filtered_html');
define('JOOMLA_UPDATE_DUPLICATE', FALSE);
define('JOOMLA_IMG_FOLDER', 'images');
define('JOOMLA_IMG_PATH', 'http://asmdc.org/members/a27/images/galleries/');
define('JOOMLA_ENTITY_TYPE', 'node');
define('JOOMLA_DEFAULT_STATIC_NODETYPE', 'page');
define('JOOMLA_DEFAULT_BLOG_NODETYPE', 'article');
define('JOOMLA_DEFAULT_CATEGORY_VOCABULARY', 'tags');
define('JOOMLA_REAL_NAME_FIELD', FALSE);
define('JOOMLA_CATEGORY_ARTICLE', 'press-releases');
define('JOOMLA_CATEGORY_PHOTO', 'photo');
define('JOOMLA_CATEGORY_EVENT', 'events');
define('JOOMLA_CATEGORY_VIDEO', 'video');
define('JOOMLA_CATEGORY_NEWS', 'news');




/**
 * Implements hook_help().
 */
function joomla_help($section)
{
  switch ($section) {
    case 'admin/help#joomla':
      $output = "The joomla module used for migrate Joomla to Drupal.";
      return $output;
    case 'admin/modules#description':
      return 'The joomla module used for migrate Joomla to Drupal.';
  }
}

/**
 * Implements hook_permission().
 */
function joomla_permission()
{
  return array('administer joomla' => array(
    'description' => t('Access Joomla Import Settings'),
    'title' => t('Administer Joomla'),
    'restrict access' => TRUE,
  ),
  );
}

/**
 * Implements hook_node_delete().
 */
function joomla_node_delete($node)
{
  db_delete('joomla_content')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_menu().
 */
function joomla_menu()
{
  $items = array();
  $items['admin/config/content/joomla'] = array(
    'title' => 'Joomla to Drupal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('joomla_admin_settings'),
    'access arguments' => array('administer joomla'),
    'description' => 'Migrate Joomla to Drupal.',
  );
  $items['admin/config/content/joomla/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

/**
 * Joomla admin settings.
 */
function joomla_admin_settings($form, &$form_state)
{
  // only administrators can access this function
  $weight = -20;
  $bundle = variable_get('joomla_default_static_nodetype', JOOMLA_DEFAULT_STATIC_NODETYPE);
  // Generate the form - settings applying to all patterns first
  $form['joomla_import_settings'] = array(
    '#type' => 'fieldset',
    '#weight' => $weight,
    '#title' => t('Import defaults'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => 'Set the default values for the ' . l('Import from Joomla', 'admin/content/joomla_import') . ' form',
  );
  $form['joomla_import_settings'][] = joomla_import_form_checkboxes();
  $weight++;
  $form['joomla_settings_database'] = array(
    '#type' => 'fieldset',
    '#weight' => $weight,
    '#title' => t('Joomla settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['joomla_settings_database']['joomla_database_host'] = array(
    '#type' => 'textfield',
    '#title' => 'Joomla database host name',
    '#default_value' => variable_get('joomla_database_host', JOOMLA_DATABASE_HOST),
    '#description' => 'Host name of Joomla database server.'
  );
  $form['joomla_settings_database']['joomla_database_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Joomla database name',
    '#default_value' => variable_get('joomla_database_name', JOOMLA_DATABASE_NAME),
    '#description' => 'Joomla database name.'
  );
  $form['joomla_settings_database']['joomla_database_user'] = array(
    '#type' => 'textfield',
    '#title' => 'Joomla database user name',
    '#default_value' => variable_get('joomla_database_user', JOOMLA_DATABASE_USER),
    '#description' => 'User name for Joomla database server.'
  );
  $form['joomla_settings_database']['joomla_database_pass'] = array(
    '#type' => 'textfield',
    '#title' => 'Joomla database password',
    '#default_value' => variable_get('joomla_database_pass', JOOMLA_DATABASE_PASS),
    '#description' => 'Password for Joomla database server.'
  );
  $form['joomla_settings_database']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced database settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE
  );
  $form['joomla_settings_database']['advanced']['joomla_database_port'] = array(
    '#type' => 'textfield',
    '#title' => 'Joomla database port number',
    '#default_value' => variable_get('joomla_database_port', JOOMLA_DATABASE_PORT),
    '#description' => 'Port number for Joomla database server.  The default (3306) is usually fine.'
  );
  $form['joomla_settings_database']['advanced']['joomla_prefix'] = array(
    '#type' => 'textfield',
    '#title' => 'Table Prefix of Joomla',
    '#default_value' => variable_get('joomla_prefix', JOOMLA_PREFIX),
    '#description' => 'Table Prefix for Joomla tables.'
  );
  $form['joomla_settings_database']['joomla_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Path of your Joomla installation',
    '#default_value' => variable_get('joomla_path', JOOMLA_PATH),
    '#description' => 'The path name where you install Joomla. Example:<br />'
      . '<ul><li>Apache: <b>/home/YOUR_USERNAME/public_html/joomla</b></li>'
      . '<li>Windows using WAMP: <b>c:/wamp/www/joomla</b></li>'
      . '<li>Windows using IIS: <b>C:/Inetpub/wwwroot/joomla</b></li></ul>'
  );
  $weight++;
  $form['joomla_settings_content'] = array(
    '#type' => 'fieldset',
    '#weight' => $weight,
    '#title' => t('Content settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $filter_node_options = array();
  foreach (node_type_get_types() as $key => $val) {
    if (node_access('create', $key)) {
      $filter_node_options[$key] = $val->name;
    }
  }
  $form['joomla_settings_content']['joomla_default_static_nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for static items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => $bundle,
  );
  $form['joomla_settings_content']['joomla_default_blog_nodetype'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for article content items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => variable_get('joomla_default_blog_nodetype', JOOMLA_DEFAULT_BLOG_NODETYPE),
  );
  $form['joomla_settings_content']['joomla_default_category_article'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias for article category on joomla site'),
    '#required' => TRUE,
    '#default_value' => variable_get('joomla_default_category_article', JOOMLA_CATEGORY_ARTICLE),
  );
  $form['joomla_settings_content']['joomla_default_blog_nodetype_photo'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for photo content items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => variable_get('joomla_default_blog_nodetype_photo', JOOMLA_DEFAULT_BLOG_NODETYPE),
  );
  $form['joomla_settings_content']['joomla_default_category_photo'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias for photo gallery category on joomla site'),
    '#required' => TRUE,
    '#default_value' => variable_get('joomla_default_category_photo', JOOMLA_CATEGORY_PHOTO),
  );
  $form['joomla_settings_content']['joomla_default_blog_nodetype_video'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for video content items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => variable_get('joomla_default_blog_nodetype_video', JOOMLA_DEFAULT_BLOG_NODETYPE),
  );
  $form['joomla_settings_content']['joomla_default_category_video'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias for video gallery category on joomla site'),
    '#required' => TRUE,
    '#default_value' => variable_get('joomla_default_category_video', JOOMLA_CATEGORY_VIDEO),
  );
  $form['joomla_settings_content']['joomla_default_blog_nodetype_news'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for news content items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => variable_get('joomla_default_blog_nodetype_news', JOOMLA_DEFAULT_BLOG_NODETYPE),
  );
  $form['joomla_settings_content']['joomla_default_category_news'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias for news gallery category on joomla site'),
    '#required' => TRUE,
    '#default_value' => variable_get('joomla_default_category_news', JOOMLA_CATEGORY_NEWS),
  );
  $form['joomla_settings_content']['joomla_default_blog_nodetype_event'] = array(
    '#type' => 'select',
    '#title' => t('Default node type for event content items'),
    '#required' => TRUE,
    '#options' => $filter_node_options,
    '#default_value' => variable_get('joomla_default_blog_nodetype_event', JOOMLA_DEFAULT_BLOG_NODETYPE),
  );
  $form['joomla_settings_content']['joomla_default_category_event'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias for event gallery category on joomla site'),
    '#required' => TRUE,
    '#default_value' => variable_get('joomla_default_category_event', JOOMLA_CATEGORY_EVENT),
  );
  $filter_category_options = array();
  foreach (taxonomy_get_vocabularies() as $vocabulary) {
    $filter_category_options[$vocabulary->vid] = $vocabulary->name;
  }
  $form['joomla_settings_content']['joomla_default_category_vocabulary'] = array(
    '#type' => 'select',
    '#title' => t('Default vocabulary for article categories'),
    '#required' => TRUE,
    '#options' => $filter_category_options,
    '#default_value' => variable_get('joomla_default_category_vocabulary', JOOMLA_DEFAULT_CATEGORY_VOCABULARY),
  );
  $node_fields = array();
  foreach (field_info_instances('node', $bundle) as $field_name => $field) {
    $node_fields[$field_name] = $field['label'];
  }
  foreach (taxonomy_get_vocabularies() as $vocabulary) {
    $form['joomla_settings_content']['joomla_field_' . $vocabulary->machine_name] = array(
      '#type' => 'select',
      '#title' => t('Field to store @name associations', array('@name' => $vocabulary->name)),
      '#options' => $node_fields,
      '#empty_value' => FALSE,
      '#default_value' => variable_get('joomla_field_' . $vocabulary->machine_name, JOOMLA_REAL_NAME_FIELD),
    );
  }
  $lang_options = language_list();
  $langs['und'] = 'None (undefined)';
  foreach ($lang_options as $code => $lang) {
    $langs[$code] = $lang->name;
  }
  $form['joomla_settings_content']['joomla_default_language'] = array(
    '#type' => 'select',
    '#title' => t('Language to import your content to'),
    '#required' => TRUE,
    '#options' => $langs,
    '#default_value' => variable_get('joomla_default_language', LANGUAGE_NONE),
  );
  $formats = array();
  foreach (filter_formats() as $key => $format) {
    $formats[$key] = $format->name;
  }
  $form['joomla_settings_content']['joomla_input_format'] = array(
    '#type' => 'select',
    '#title' => t('Input Format'),
    '#default_value' => variable_get('joomla_input_format', JOOMLA_INPUT_FORMAT),
    '#options' => $formats,
    '#description' => t('The filter format selected below will be applied to all imported content and comments.'),
  );
  $form['joomla_settings_content']['joomla_img_folder'] = array(
    '#type' => 'textfield',
    '#title' => 'Image/Picture folder',
    '#default_value' => variable_get('joomla_img_folder', JOOMLA_IMG_FOLDER),
    '#description' => "A folder to save any images from Joomla contents. This folder related to Drupal 'files' folder, i.e: if you enter '<b>images</b>' then all imported images will be save to Drupal '<b>files/images</b>'."
  );
 $form['joomla_settings_content']['joomla_img_folder_photo_gallery'] = array(
    '#type' => 'textfield',
    '#title' => 'Path to photo gallery',
    '#default_value' => variable_get('joomla_img_folder_photo_gallery', JOOMLA_IMG_PATH),
    '#description' => "A path to store photo gallery on Joomla site."
  );
  return system_settings_form($form);
}
/**
 * These checkboxes are used on both the admin and import forms.
 */
function joomla_import_form_checkboxes(&$form_state = NULL)
{
  $form['joomla_import'] = array(
    '#type' => 'fieldset',
    '#title' => t('Items to import'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['joomla_import']['joomla_import_content'] = array(
    '#type' => 'checkbox',
    '#title' => t('Import content'),
    '#default_value' => variable_get('joomla_import_content', JOOMLA_IMPORT_CONTENT),
  );
  $form['joomla_import']['joomla_import_categories'] = array(
    '#type' => 'checkbox',
    '#title' => t('Import categories'),
    '#default_value' => variable_get('joomla_import_categories', JOOMLA_IMPORT_CATEGORIES),
  );
  $form['joomla_import']['joomla_import_users'] = array(
    '#type' => 'checkbox',
    '#title' => t('Import users'),
    '#default_value' => variable_get('joomla_import_users', JOOMLA_IMPORT_USERS),
  );
  return $form;
}

/**
 * Submit import form.
 */
function joomla_import_form_submit($form, &$form_state)
{
  variable_set('joomla_import_users', $form_state['values']['joomla_import_users']);
  variable_set('joomla_import_groups',$form_state['values']['joomla_import_groups']);
  variable_set('joomla_import_comments',$form_state['values']['joomla_import_comments']);
  variable_set('joomla_import_categories', $form_state['values']['joomla_import_categories']);
  variable_set('joomla_import_content', $form_state['values']['joomla_import_content']);
  variable_set('joomla_update_duplicate',$form_state['values']['joomla_update_duplicate']);
}

/**
 *
 */
function joomla_replace_mos_image($images_source, $text_source)
{
  $joomla_img_folder = variable_get('joomla_img_folder', JOOMLA_IMG_FOLDER);
  $joomla_path = variable_get('joomla_path', JOOMLA_PATH);
  $images = array();
  $images = explode("\n", $images_source);
  $image_string = '{mosimage}';
  $n = 0;
  $images_items = array();
  while (!(strpos($text_source, $image_string) === FALSE)) {
    $images_items = explode("|", $images[$n]);
    if (!file_exists('public://' . $joomla_img_folder)) {
      mkdir('public://' . $joomla_img_folder);
    }
    if (dirname($images_items[0])) {
      if (!file_exists('public://' . $joomla_img_folder . '/' . dirname($images_items[0]))) {
        mkdir('public://' . $joomla_img_folder . '/' . dirname($images_items[0]));
      }
    }
    copy($joomla_path . '/images/stories/' . $images_items[0], "public://$joomla_img_folder/" . $images_items[0]);
    $images_replace = '<img src="' . base_path() . variable_get('file_public_path', conf_path() . '/files') . "/$joomla_img_folder/{$images_items[0]}" . '"'
      . ' align="' . $images_items[1] . '" title="' . $images_items[2] . '" alt="' . $images_items[2] . '"/>';
    $text_source = substr_replace($text_source, $images_replace, strpos($text_source, $image_string), 10);
    $n++;
  }
  return $text_source;
}

/**
 *
 */
function joomla_replace_image_link($text_source)
{
  //Fixs image string: src="images/
  $image_string = 'src="images/';
  $images_replace = 'src="' . base_path() . variable_get('file_public_path', conf_path() . '/files/') . variable_get('joomla_img_folder', JOOMLA_IMG_FOLDER) . '/';
  $text_result = str_replace('src="images/', "$images_replace", $text_source);
  return $text_result;
}

/**
 * Implements hook_form_alter().
 */
function joomla_form_alter(&$form, &$form_state, $form_id)
{
  if ($form_id == 'user_login' || $form_id == 'user_login_block') {
    if (isset($form_state['input']['name'])) {
      $last_validator = array_pop($form['#validate']);
      $form['#validate'][] = 'joomla_login_validate';
      $form['#validate'][] = $last_validator;
    }
  }
}

/**
 *
 */
function joomla_login_validate($form, &$form_state)
{
  joomla_authenticate($form_state['values'], $form_state['uid']);
}

/**
 *
 */
function joomla_authenticate($form_values = array(), &$form_uid)
{
  global $user;
  if (!empty($user->uid) || $form_uid) {
    // User has already sucessfully authenticated
    return;
  }
  if (form_get_errors() || empty($form_values['name']) || empty($form_values['pass'])) {
    return;
  }
  $account = user_load_by_name($form_values['name']);
  // The user doesn't exist
  if (!$account) {
    return;
  }
  // See if the user has a password record from Joomla import
  $joomla_user = db_query('SELECT * FROM {joomla_users} WHERE uid = :uid', array(':uid' => $account->uid))->fetch();
  if (!$joomla_user) {
    return;
  }
  /**
   * If the password doesn't contain a colon, it is an unsalted password.
   * It will have been inserted into the drupal users table during the
   * import, and to get here the Drupal login must have already failed
   * against it, so nothing left to do.
   */
  if (strpos($joomla_user->password, ':')) {
    list($password, $salt) = explode(':', $joomla_user->password, 2);
  } else {
    $password = $joomla_user->password;
    $salt = '';
  }
  // Check the supplied password against the md5sum
  if (md5($form_values['pass'] . $salt) == $password || (!$salt && md5($form_values['pass']) == $password)) {
    $user = $account;
    watchdog('joomla', 'Converting password for user @name (Joomla id @juid)', array('@name' => $user->name, '@juid' => $joomla_user->juid));
    // Update the users Drupal password
    user_save($user, array('pass' => $form_values['pass']));
    $joomla_user->converted = 1;
    drupal_write_record('joomla_users', $joomla_user, array('uid'));
    $form_uid = $user->uid;
    user_login_finalize($form_values);
    return $user;
  }
}

/**
 * Initialise settings for communicating with the Joomla database. This
 * makes it possible to switch between the Drupal and Joomla databases with
 * db_set_active().
 */
function joomla_database_init()
{
  $joomla_db = Database::getConnectionInfo('joomla');
  if (empty($joomla_db)) {
    /**
     * It's not possible to use a combination of database engines, e.g.
     * mysql and mysqli, at the same time.  So, determine which one is
     * in use on the Drupal site and use it for the Joomla connection
     */
    $dbs = Database::getConnectionInfo('default');
    // same engine for two db: Drupal's limit
    $engine = $dbs['default']['driver'];
    $joomla_url = array(
      'database' => variable_get('joomla_database_name', JOOMLA_DATABASE_NAME),
      'username' => variable_get('joomla_database_user', JOOMLA_DATABASE_USER),
      'password' => variable_get('joomla_database_pass', JOOMLA_DATABASE_PASS),
      'host' => variable_get('joomla_database_host', JOOMLA_DATABASE_HOST),
      'port' => variable_get('joomla_database_port', JOOMLA_DATABASE_PORT),
      'prefix' => variable_get('joomla_prefix', JOOMLA_PREFIX),
      'driver' => $engine,
    );
    Database::addConnectionInfo('joomla', 'default', $joomla_url);
  }
}

/**
 * Test whether a valid joomla database has been configured.
 */
function joomla_database_test()
{
  $connection = @mysql_connect(variable_get('joomla_database_host', JOOMLA_DATABASE_HOST) . ':' . variable_get('joomla_database_port', JOOMLA_DATABASE_PORT), variable_get('joomla_database_user', JOOMLA_DATABASE_USER), variable_get('joomla_database_pass', JOOMLA_DATABASE_PASS), TRUE, 2);
  if (!$connection) {
    return FALSE;
  }
  if (!mysql_select_db(variable_get('joomla_database_name', JOOMLA_DATABASE_NAME))) {
    return FALSE;
  }
  return TRUE;
}


function joomla_cron() {
  $joomla_update_duplicate = (bool) variable_get('joomla_update_duplicate', false);
  $jos = array();
  $jos['users'] =  (bool) variable_get('joomla_import_users', false);
  $jos['groups'] = (bool) variable_get('joomla_import_groups',false);
  $jos['comments'] = (bool) variable_get('joomla_import_comments', false);
  $jos['categories'] = (bool) variable_get('joomla_import_categories', false);
  $jos['content'] = (bool) variable_get('joomla_import_content', false);
  $op = !empty($jos) ? array('joomla_batch_save', array($jos, $joomla_update_duplicate)) : NULL;
  joomla_batch_save($jos, $joomla_update_duplicate);
}
/**
 *
 */
function joomla_batch_save($jos, $joomla_update_duplicate)
{
  joomla_database_init();

  if ($jos['users']) {
    joomla_user_save($context);
  }
  if ($jos['categories']) {
    joomla_category_save($context);
  }
  if ($jos['content']) {
    joomla_content_save($context);
  }
}


/**
 * @param $context
 */
function joomla_user_save(&$context)
{
  $joomla_update_duplicate = $context['sandbox']['joomla_update_duplicate'];
  $offset = & $context['sandbox']['users_offset'];
  db_set_active('joomla');
  $users = db_select('users', 'u')
    ->fields('u')
    ->orderBy('u.id', 'DESC')
    ->range($offset, 10)
    ->execute()
    ->fetchAll();
  foreach ($users as $num => $data) {
    $context['sandbox']['progress']++;
    $context['results']['accounts_total']++;
    db_set_active();
    $uid = db_query("SELECT uid FROM {joomla_users} WHERE juid = :juid", array(':juid' => $data->id))->fetchField();
    $converted = db_query("SELECT converted FROM {joomla_users} WHERE juid = :juid", array(':juid' => $data->id))->fetchField();
    // Check if the user has selected to update previously imported users
    if ($uid && !$joomla_update_duplicate) {
      continue;
    }
    //if this user has his password converted to drupals hash then we must not update him
    if ($converted && $joomla_update_duplicate) {
      continue;
    }
    $account = new stdClass();
    // Set uid if we are updating an existing record
    if ($uid) {
      $account->uid = $uid;
    } else {
      //check username to be unique
      $duplicate = db_query_range("SELECT name FROM {users} WHERE name = :name", 0, 1, array(':name' => $data->username))->fetchField();
      if (!empty($duplicate)) {
        //the username already exists
        $context['results']['accounts_duplicate']++;
        continue;
      }
      $account->is_new = TRUE;
    }
    $account->name = $data->username;
    $account->mail = $data->email;
    $account->status = !$data->block;
    $account->created = strtotime($data->registerDate);
    $account->access = strtotime($data->lastvisitDate);
    //no negative values
    $account->access = ($account->access < 0) ? NULL : $account->access;
    $account->created = ($account->created < 0) ? NULL : $account->created;
    if ($real_name_field = variable_get('joomla_real_name_field', JOOMLA_REAL_NAME_FIELD)) {
      $lang = field_language('user', $account, $real_name_field);
      $account->{$real_name_field}[$lang][0]['value'] = $data->name;
    }
    /**
     * Older versions of Joomla used an unsalted MD5 password hash.  If this
     * is the case we can use this hash as the Drupal password.
     */
    if (drupal_strlen($data->password) == 32) {
      $account->pass = $data->password;
    }
    $res = user_save($account);
    if ($res) {
      // Write into the joomla -> drupal user mapping table
      $joomla_user = new stdClass();
      $joomla_user->uid = $account->uid;
      $joomla_user->juid = $data->id;
      $joomla_user->password = $data->password;
      if ($uid) {
        drupal_write_record('joomla_users', $joomla_user, 'uid');
      } else {
        drupal_write_record('joomla_users', $joomla_user);
      }
    }
    if ($uid && $res) {
      $context['results']['accounts_updated']++;
    } elseif (!$uid && $res) {
      $context['results']['accounts_new']++;
    } else {
      $context['results']['accounts_failed']++;
    }
    // Hook to allow other modules to modify the term
    module_invoke_all('joomla', 'user', $account, $data);
    $context['message'] = t('Now processing %user', array('%user' => $data->name));
  }
  $offset += 10;
}

/**
 * @param $context
 */
function joomla_map_save(&$context)
{
  $offset = & $context['sandbox']['maps_offset'];
  db_set_active('joomla');
  $groups = db_select('user_usergroup_map', 'm')
    ->fields('m')
    ->range($offset, 10)
    ->execute()
    ->fetchAll();
  foreach ($groups as $num => $data) {
    $context['sandbox']['progress']++;
    $context['results']['maps_total']++;
    db_set_active();
    $rid = db_query("SELECT rid FROM {joomla_roles} WHERE jgroupid = :jgroupid", array(':jgroupid' => $data->group_id))->fetchField();
    if (!$rid) {
      drupal_set_message(t('Could not find a role for joomla group @jgid', array('@jgid' => $data->group_id)), 'error');
      $context['results']['maps_failed']++;
      continue;
    }
    $uid = db_query("SELECT uid FROM {joomla_users} WHERE juid = :juid", array(':juid' => $data->user_id))->fetchField();
    if (!$uid) {
      drupal_set_message(t('Could not find an account for joomla user @juid', array('@juid' => $data->user_id)), 'error');
      $context['results']['maps_failed']++;
      continue;
    }

    $account = user_load($uid);
    $account->roles[$rid] = true;

    $res = user_save($account);
    if ($res) {
      $context['results']['maps_updated']++;
    } else {
      $context['results']['maps_failed']++;
    }
    // Hook to allow other modules to modify the term
    module_invoke_all('joomla', 'map', $account, $data);
    $context['message'] = t('Now processing user-role map');
  }
  $offset += 10;
}

/**
 *
 */
function joomla_category_save(&$context)
{
  $joomla_update_duplicate = $context['sandbox']['joomla_update_duplicate'];
  $cat_offset = & $context['sandbox']['categories_offset'];
  db_set_active('joomla');
  $categories = db_select('categories', 'c')
    ->fields('c', array('id', 'title', 'description', 'parent_id'))
    ->where('(extension = :extension)', array('extension' => 'com_content'))
    ->orderBy('level', 'ASC')
    ->range($cat_offset, 10)
    ->execute()
    ->fetchAll();
  db_set_active();
  //Process Joomla categories -> Drupal terms
  foreach ($categories as $num => $category) {
    $context['results']['categories_total']++;
    $context['sandbox']['progress']++;
    $term_map = db_query("SELECT tid FROM {joomla_categories} WHERE jcategoryid = :jcategoryid", array(':jcategoryid' => $category->id))->fetchField();
    if ($term_map && !$joomla_update_duplicate) {
      continue;
    }
    $term = NULL;
    if ($term_map) {
      $term = db_query('SELECT * FROM {taxonomy_term_data} WHERE tid = :tid', array(':tid' => $term_map))->fetch();
      if (!$term) {
        drupal_set_message(t('Unable to load term id @id', array('@id' => $term_map)), 'error');
        $context['results']['categories_failed']++;
        continue;
      }
    } else {
      $term = new stdClass();
    }
    $term->name = $category->title;
    $term->description = $category->description;
    $parent = db_query("SELECT tid FROM {joomla_categories} WHERE jcategoryid = :jcategoryid", array(':jcategoryid' => $category->parent_id))->fetchField();
    if ($parent) {
      $term->parent = $parent;
    }
    $vid = variable_get('joomla_default_category_vocabulary');
    if (!$vid) {
      drupal_set_message(t('The vocabulary for categories was not configured'), 'error');
      $context['results']['categories_failed']++;
      continue;
    }
    $term->vid = $vid;
    $res = FALSE;
    $res = taxonomy_term_save($term);
    if ($res && !$term_map) {
      // Create an entry in the category <-> vocabulary map table
      $joomla_category = new stdClass();
      $joomla_category->tid = $term->tid;
      $joomla_category->jcategoryid = $category->id;
      drupal_write_record('joomla_categories', $joomla_category);
    }
    switch ($res) {
      case SAVED_NEW:
        $context['results']['categories_new']++;
        break;
      case SAVED_UPDATED:
        $context['results']['categories_updated']++;
        break;
      default:
        $context['results']['categories_failed']++;
        break;
    }
    // Hook to allow other modules to modify the term
    module_invoke_all('joomla', 'term', $term, $category);
  }
}

/**
 * Get content from Joomla site and create node for 
 * drupal site.
 */
function joomla_content_save(&$context)
{
  $test = TRUE;
  $joomla_update_duplicate = $context['sandbox']['joomla_update_duplicate'];
  $images = & $context['sandbox']['images'];
  $offset = 0;
  db_set_active('joomla');
  $q = db_select('content', 'cs');
  $q->leftJoin('content_frontpage', 'cf', 'cf.content_id = cs.id');
  $q->Join('categories', 'ct', 'ct.id = cs.catid');
  $q->fields('cs')
    ->fields('cf', array('content_id'))
	->fields('ct', array('alias'))
    ->range($offset, 1000);
  $content = $q->execute()->fetchAll();
  db_set_active();
  foreach ($content as $num => $data_joomla) {
    $context['results']['content_total']++;
    $context['sandbox']['progress']++;
    $content_map = db_query('SELECT n.nid, jcontentid, changed FROM {joomla_content} jc JOIN {node} n ON n.nid = jc.nid WHERE jc.jcontentid = :contentid', array(':contentid' => $data_joomla->id))->fetch();
    if ($content_map && !$joomla_update_duplicate) {
      // Content item has already been imported and update is off
      continue;
    }
	/**
     * If the content item already exists, but has not been updated
     * since the last import, skip it
     */
    $joomla_changed = strtotime($data_joomla->modified);
    //if changed is negative drupal will throw an error so:
    if ($joomla_changed < 0) {
      $joomla_changed = 0;
    }
    if ($content_map && $joomla_changed == $content_map->changed) {
      continue;
    }
	// create node for photo content type
	// creating video
	$cat_video_alias = variable_get('joomla_default_category_video','');
	if ($data_joomla->alias == $cat_video_alias) {
	  module_load_include('inc', 'joomla', 'joomla.video');
	  if ($test) {
	    joomla_create_content_video($data_joomla, $content_map, $cat_video_alias);
		$test = TRUE;  		   
	   }       
	}
	// creating photo
	/*
	$cat_alias = variable_get('joomla_default_category_photo','');
    if ($data_joomla->alias == $cat_alias) {
	  module_load_include('inc', 'joomla', 'joomla.photo');
	   if ($test) {
		 joomla_create_content_photo($data_joomla, $content_map, $cat_alias);
		 $test = TRUE;  		   
	   }
       
	}
	*/
	
    if (!$content_map) {
      // Created new node, update joomla table
      $joomla_content = new stdClass();
      $joomla_content->nid = $node->nid;
      $joomla_content->jcontentid = $data_joomla->id;
      //drupal_write_record('joomla_content', $joomla_content);
    }
    if (!$content_map && $node->nid) {
      $context['results']['content_new']++;
    } elseif ($content_map && $node->nid) {
      $context['results']['content_updated']++;
    } else {
      $context['results']['content_failed']++;
    }
    // Hook to allow other modules to modify the node
    module_invoke_all('joomla', 'node', $node, $data_joomla);
  }
}

/**
 *
 */
function joomla_comment_save(&$context)
{
  $joomla_update_duplicate = $context['sandbox']['joomla_update_duplicate'];
  $offset = & $context['sandbox']['comments_offset'];
  db_set_active('joomla');
  $jcomments = db_select('jcomments', 'jc')
    ->fields('jc')
    ->orderBy('jc.id', 'ASC')
    ->range($offset, 10)
    ->execute()
    ->fetchAll();
  db_set_active();
  foreach ($jcomments as $num => $jcomment) {
    $context['sandbox']['progress']++;
    $context['results']['comments_total']++;
    db_set_active();
    $cid = db_query("SELECT cid FROM {joomla_comments} WHERE jcommentid = :jcid", array(':jcid' => $jcomment->id))->fetchField();
    // Check if the comment has selected to update previously imported comments
    if ($cid && !$joomla_update_duplicate) {
      continue;
    }
    $comment = new stdClass();
    // Set cid if we are updating an existing record
    if ($cid) {
      $comment->cid = $cid;
    }
    $nid = db_query('SELECT nid FROM {joomla_content} WHERE jcontentid = :jcontentid', array(':jcontentid' => $jcomment->object_id))->fetchField();
    $uid = db_query('SELECT uid FROM {joomla_users} WHERE juid = :juid', array(':juid' => $jcomment->userid))->fetchField();
    if (!$nid) {
      $context['results']['comments_failed']++;
      continue;
    }
    $pid = 0;
    if ($jcomment->parent) {
      $pid = db_query('SELECT cid FROM {joomla_comments} WHERE jcommentid = :jparent', array(':jparent' => $jcomment->parent))->fetchField();
    }
    $comment->pid = $pid;
    $comment->nid = $nid;
    $comment->uid = $uid ? $uid : 0;
    $comment->subject = (isset($jcomment->title) && $jcomment->title)
      ? $jcomment->title
      : truncate_utf8(trim(decode_entities(strip_tags($jcomment->comment))), 29, TRUE);
    $comment->hostname = $jcomment->ip;
    $comment->created = strtotime($jcomment->date);
    $comment->changed = $comment->created;
    $comment->status = $jcomment->published;
    $comment->name = $jcomment->name;
    $comment->mail = valid_email_address($jcomment->email) ? $jcomment->email : NULL;
    $comment->homepage = $jcomment->homepage;
    $comment->language = LANGUAGE_NONE;
    // no negative values
    $comment->created = ($comment->created < 0) ? NULL : $comment->created;
    $comment->comment_body[LANGUAGE_NONE][0]['value'] = $jcomment->comment;
    $comment->comment_body[LANGUAGE_NONE][0]['format'] = variable_get('joomla_input_format', JOOMLA_INPUT_FORMAT);
    comment_save($comment);
    if ($comment->cid) {
      // Write into the joomla -> drupal comment mapping table
      $joomla_comment = new stdClass();
      $joomla_comment->cid = $comment->cid;
      $joomla_comment->jcommentid = $jcomment->id;
      if ($cid) {
        drupal_write_record('joomla_comments', $joomla_comment, 'cid');
      } else {
        drupal_write_record('joomla_comments', $joomla_comment);
      }
    }
    if ($cid && $comment->cid) {
      $context['results']['comments_updated']++;
    } elseif (!$cid && $comment->cid) {
      $context['results']['comments_new']++;
    } else {
      $context['results']['comments_failed']++;
    }
    // Hook to allow other modules to modify the term
    module_invoke_all('joomla', 'jcomment', $comment, $jcomment);
    $context['message'] = t('Now processing JComment: %comment', array('%comment' => $comment->subject));
  }
  $offset += 10;
}

/**
 *
 */
function joomla_batch_finished($success, $results, $operations)
{
  if ($success) {
    drupal_set_message(t('Processed @total roles (@new new, @duplicate duplicates, @updated updated, @failed errors)', array(
      '@total' => $results['groups_total'],
      '@duplicate' => $results['groups_duplicate'],
      '@new' => $results['groups_new'],
      '@updated' => $results['groups_updated'],
      '@failed' => $results['groups_failed'],
    )));
    drupal_set_message(t('Processed @users_total users (@users_new new, @users_duplicate duplicates, @users_updated updated, @users_failed errors)', array(
      '@users_total' => $results['accounts_total'],
      '@users_duplicate' => $results['accounts_duplicate'],
      '@users_new' => $results['accounts_new'],
      '@users_updated' => $results['accounts_updated'],
      '@users_failed' => $results['accounts_failed'],
    )));
    drupal_set_message(t('Processed @total user-group maps (@updated updated, @failed errors)', array(
      '@total' => $results['maps_total'],
      '@updated' => $results['maps_updated'],
      '@failed' => $results['maps_failed'],
    )));
    drupal_set_message(t('Processed @total categories (@new new, @updated updated, @failed errors)', array(
      '@total' => $results['categories_total'],
      '@new' => $results['categories_new'],
      '@updated' => $results['categories_updated'],
      '@failed' => $results['categories_failed'],
    )));
    drupal_set_message(t('Processed @total content items (@new new, @updated updated, @failed errors)', array(
      '@total' => $results['content_total'],
      '@new' => $results['content_new'],
      '@updated' => $results['content_updated'],
      '@failed' => $results['content_failed'],
    )));
    drupal_set_message(t('Processed @total comments (@new new, @updated updated, @failed errors)', array(
      '@total' => $results['comments_total'],
      '@new' => $results['comments_new'],
      '@updated' => $results['comments_updated'],
      '@failed' => $results['comments_failed'],
    )));
  } else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array('%error_operation' => $error_operation[0], '@arguments' => print_r($error_operation[1], TRUE)));
    drupal_set_message($message, 'error');
  }
}
